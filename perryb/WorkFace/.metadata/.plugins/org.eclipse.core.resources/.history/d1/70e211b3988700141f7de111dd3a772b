package installer;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;

import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.UIManager;

public class Installer extends JFrame{

	public static void main(String[] args) {
		try {
			
		}
		catch (Exception e) {
			String msg = e.getMessage();
			if ((msg != null) && (msg.equals("QUIET"))) {
				return;
			}
			e.printStackTrace();
			String str = installUtil.getExceptionStackTrace(e);
			str = str.replace("\t", " ");
			JTextArea textArea = new JTextArea(str);
			textArea.setEditable(false);
			Font f = textArea.getFont();
			Font f2 = new Font("Monospaced", f.getStyle(), f.getSize());
			textArea.setFont(f2);
			JScrollPane scrollPane = new JScrollPane(textArea);
			scrollPane.setPreferredSize(new Dimension(600, 400));
			JOptionPane.showMessageDialog(null, scrollPane, "Error", 0);
		}
	}
public static void doInstall() throws Exception{
	File dirMc = installUtil.getWorkingDirectory();
	installUtil.dbg("Dir minecraft: " + dirMc);
	File dirMcLib = new File(dirMc, "libraries");
    installUtil.dbg("Dir libraries: " + dirMcLib);
    File dirMcVers = new File(dirMc, "versions");
    installUtil.dbg("Dir versions: " + dirMcVers);
    
    String ofVer = getSSGNVersion();
    Utils.dbg("OptiFine Version: " + ofVer);
    String[] ofVers = Utils.tokenize(ofVer, "_");
    
    String mcVer = ofVers[1];
    Utils.dbg("Minecraft Version: " + mcVer);
    
    String ofEd = getOptiFineEdition(ofVers);
    Utils.dbg("OptiFine Edition: " + ofEd);
    
    installOptiFineLibrary(mcVer, ofEd, dirMcLib);
    
    String mcVerOf = mcVer + "-OptiFine_" + ofEd;
    Utils.dbg("Minecraft_OptiFine Version: " + mcVerOf);
    copyMinecraftVersion(mcVer, mcVerOf, dirMcVers);
    
    updateJson(dirMcVers, mcVerOf, dirMcLib, mcVer, ofEd);
    
    updateLauncherJson(dirMc, mcVerOf);
}

	
}
